{
    "gnesis-model-with-multiple": {
        "prefix": "gm",
        "body": [
            "module.exports = function (sequelize, DataTypes) {",
            "  const attributes = {",
            "    ...definirAtributosBase(DataTypes),",
            "    ...definirAtributosExtendidos(DataTypes),",
            "  //TODO: Puedes seguir añadiendo los atributos necesarios para la entidad",
            "  };",
            "  const options = definirOpcionesDelModelo();",
            "",
            "  var ${1:NombreModelo} = sequelize.define('${1:NombreModelo}', attributes, options);",
            "  return ${1:NombreModelo};",
            "};",
            "",
            "/**",
            " * Define los atributos base para el modelo",
            " * @param {Object} DataTypes - Tipos de datos de Sequelize",
            " * @returns {Object} Atributos base del modelo",
            " */",
            "function definirAtributosBase(DataTypes) {",
            "  return {",
            "    id: crearAtributoClavePrimaria(DataTypes),",
            "  };",
            "}",
            "",
            "/**",
            " * Crea el atributo de clave primaria",
            " * @param {Object} DataTypes - Tipos de datos de Sequelize",
            " * @returns {Object} Definición del atributo de clave primaria",
            " */",
            "function crearAtributoClavePrimaria(DataTypes) {",
            "  return {",
            "    type: DataTypes.INTEGER,",
            "    primaryKey: true,",
            "    autoIncrement: true,",
            "    pintar: [2, 3, 4],",
            "    name: 'Identificador',",
            "    tipo: 'number',",
            "  };",
            "}",
            "",
            "/**",
            " * Define los atributos extendidos para el modelo",
            " * @param {Object} DataTypes - Tipos de datos de Sequelize",
            " * @returns {Object} Atributos extendidos del modelo",
            " */",
            "function definirAtributosExtendidos(DataTypes) {",
            "  return {",
            "    //TODO: Añadir los atributos necesarios para la entidad",
            "  };",
            "}",
            "",
            "/**",
            " * Define las opciones para el modelo",
            " * @returns {Object} Opciones del modelo",
            " */",
            "function definirOpcionesDelModelo() {",
            "  return {",
            "    freezeTableName: true,",
            "    paranoid: true,",
            "    referencia: obtenerOpcionesDeReferencia(),",
            "    classMethods: definirMetodosDeClase(),",
            "    multiples: obtenerOpcionesDeMultiple(),",
            "    seguridad: obtenerOpcionesDeSeguridad(),",
            "  };",
            "}",
            "",
            "/**",
            " * Obtiene las opciones para los multiples del modelo",
            " * @returns {Object} Opciones de referencia",
            " */",
            "function obtenerOpcionesDeMultiple() {",
            "  return [",
            "  //TODO: Añadir los multiples necesarios para el modelo",
            "     {",
            "",
            "     }",
            "  ];",
            "}",
            "",
            "/**",
            " * Obtiene las opciones de referencia para el modelo",
            " * @returns {Object} Opciones de referencia",
            " */",
            "function obtenerOpcionesDeReferencia() {",
            "  //TODO: Añadir mas referencias en caso sea necesario",
            "  return {",
            "      titulo_modelo: '${2:Titulo de modelo}',",
            "      representante: ['${3:id}']",
            "  };",
            "}",
            "",
            "/**",
            " * Define los métodos de clase para el modelo",
            " * @returns {Object} Métodos de clase",
            " */",
            "function definirMetodosDeClase() {",
            "  return {",
            "    associate: asociarModelos,",
            "  };",
            "}",
            "",
            "/**",
            " * Define la asociación entre modelos",
            " * @param {Object} models - Objeto que contiene los modelos",
            " */",
            "function asociarModelos(models) {",
            "  //TODO: Añadir las asociaciones necesarias para el modelo",
            "  models.${1:NombreModelo}.belongsTo(models.Usuario, {",
            "    as: 'Creador',",
            "    foreignKey: {",
            "      allowNull: false,",
            "    },",
            "  });",
            "}",
            "",
            "/**",
            " * Obtiene las opciones de seguridad para el modelo",
            " * @returns {Object} Opciones de seguridad",
            " */",
            "function obtenerOpcionesDeSeguridad() {",
            "  return {",
            "    1: '${1:NombreModelo}Ins',",
            "    2: '${1:NombreModelo}Act',",
            "    3: '${1:NombreModelo}Eli',",
            "    4: '${1:NombreModelo}Bus',",
            "  };",
            "}"
        ],
        "description": "Snippet para generar un modelo con multiples en Gnesis usando una estructura modular"
    },
    "gnesis-model-basic": {
        "prefix": "gmb",
        "body": [
            "module.exports = function (sequelize, DataTypes) {",
            "  const attributes = {",
            "    ...definirAtributosBase(DataTypes),",
            "    ...definirAtributosExtendidos(DataTypes),",
            "  //TODO: Puedes seguir añadiendo los atributos necesarios para la entidad",
            "  };",
            "  const options = definirOpcionesDelModelo();",
            "",
            "  var ${1:NombreModelo} = sequelize.define('${1:NombreModelo}', attributes, options);",
            "  return ${1:NombreModelo};",
            "};",
            "",
            "/**",
            " * Define los atributos base para el modelo",
            " * @param {Object} DataTypes - Tipos de datos de Sequelize",
            " * @returns {Object} Atributos base del modelo",
            " */",
            "function definirAtributosBase(DataTypes) {",
            "  return {",
            "    id: crearAtributoClavePrimaria(DataTypes),",
            "  };",
            "}",
            "",
            "/**",
            " * Crea el atributo de clave primaria",
            " * @param {Object} DataTypes - Tipos de datos de Sequelize",
            " * @returns {Object} Definición del atributo de clave primaria",
            " */",
            "function crearAtributoClavePrimaria(DataTypes) {",
            "  return {",
            "    type: DataTypes.INTEGER,",
            "    primaryKey: true,",
            "    autoIncrement: true,",
            "    pintar: [2, 3, 4],",
            "    name: 'Identificador',",
            "    tipo: 'number',",
            "  };",
            "}",
            "",
            "/**",
            " * Define los atributos extendidos para el modelo",
            " * @param {Object} DataTypes - Tipos de datos de Sequelize",
            " * @returns {Object} Atributos extendidos del modelo",
            " */",
            "function definirAtributosExtendidos(DataTypes) {",
            "  return {",
            "    //TODO: Añadir los atributos necesarios para la entidad",
            "  };",
            "}",
            "",
            "/**",
            " * Define las opciones para el modelo",
            " * @returns {Object} Opciones del modelo",
            " */",
            "function definirOpcionesDelModelo() {",
            "  return {",
            "    freezeTableName: true,",
            "    paranoid: true,",
            "    referencia: obtenerOpcionesDeReferencia(),",
            "    classMethods: definirMetodosDeClase(),",
            "    seguridad: obtenerOpcionesDeSeguridad(),",
            "  };",
            "}",
            "",
            "/**",
            " * Obtiene las opciones de referencia para el modelo",
            " * @returns {Object} Opciones de referencia",
            " */",
            "function obtenerOpcionesDeReferencia() {",
            "  //TODO: Añadir mas referencias en caso sea necesario",
            "  return {",
            "      titulo_modelo: '${2:Titulo de modelo}',",
            "      representante: ['${3:id}']",
            "  };",
            "}",
            "",
            "/**",
            " * Define los métodos de clase para el modelo",
            " * @returns {Object} Métodos de clase",
            " */",
            "function definirMetodosDeClase() {",
            "  return {",
            "    associate: asociarModelos,",
            "  };",
            "}",
            "",
            "/**",
            " * Define la asociación entre modelos",
            " * @param {Object} models - Objeto que contiene los modelos",
            " */",
            "function asociarModelos(models) {",
            "  //TODO: Añadir las asociaciones necesarias para el modelo",
            "  models.${1:NombreModelo}.belongsTo(models.Usuario, {",
            "    as: 'Creador',",
            "    foreignKey: {",
            "      allowNull: false,",
            "    },",
            "  });",
            "}",
            "",
            "/**",
            " * Obtiene las opciones de seguridad para el modelo",
            " * @returns {Object} Opciones de seguridad",
            " */",
            "function obtenerOpcionesDeSeguridad() {",
            "  return {",
            "    1: '${1:NombreModelo}Ins',",
            "    2: '${1:NombreModelo}Act',",
            "    3: '${1:NombreModelo}Eli',",
            "    4: '${1:NombreModelo}Bus',",
            "  };",
            "}"
        ],
        "description": "Snippet para generar un modelo basico en gnesis"
    }
}